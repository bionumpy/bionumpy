## Bacterial
## 

# Main entrypoint of the workflow. 
# Please follow the best practices: 
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there. 
import bionumpy as bnp
from bionumpy.arithmetics import intersect
include: "rules/translate.smk"
include: "rules/kmer_counting.smk"
include: "rules/interval_intersection.smk"


rule all:
    input:
        [f"results/{program}/protein_sequences/l150_n1000000.fa"
         for program in ["bionumpy", "biopython"]],
        [f"results/{program}/intersect/10000_20000.bed"
         for program in ["bionumpy", "bedtools"]],
        ["results/jellyfish/kmer_counts/l50_n1000000.dump",
         "results/bionumpy/kmer_counts/l50_n1000000.csv"]


rule simulate_dna:
    output:
        "results/dna_sequences/l{length}_n{number}.fa"
    run:
        import random
        with open(output[0], "w") as f:
            for i in range(int(wildcards.number)):
                f.write(f">{i}\n")
                f.write("".join(random.choices("ACGT", k=int(wildcards.length)))+ "\n")


rule make_chrom_sizes:
    output:
        "results/chrom.sizes"
    run:
        out = ""
        for chrom in range(1, 11):
            out += f"{chrom}\t1000000\n"
        open(output[0], "w").write(out)


rule simulate_intervals:
    input:
        "results/chrom.sizes"
    output:
        "results/intervals/{n_intervals}.bed"
    run:
        import random
        chrom_sizes = [(str(l.split()[0]), int(l.split()[1])) for l in open(input[0])]
        with open(output[0], "w") as f:
            for chromosome_name, size in chrom_sizes:
                start = 1
                for _ in range(int(wildcards.n_intervals)):
                    end = start+random.randint(1, 100)
                    f.write(f"{chromosome_name}\t{start}\t{end}\t.\t0\t+\n")
                    start = end + random.randint(1, 10)

